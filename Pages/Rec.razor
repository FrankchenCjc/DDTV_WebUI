@page "/Rec"
@inject NavigationManager nav
@inject IPopupService PopupService

<MCardTitle>正在下载中的任务</MCardTitle>
<MCardSubtitle>共 @Isd().Count 个</MCardSubtitle>

<MDataTable HideDefaultFooter SingleSelect=false TItem=@DownloadD Items="@Isd()" Headers="@DownloadingH">
    <ItemColContent>
        @if (context.Header.Value == "actions")
        {
            <MButton Color="error" Text Outlined OnClick="()=>CancleRec(context.Item.Uid)">取消录制</MButton>
        }
        else
        {
            @context.Value
        }
    </ItemColContent>
</MDataTable>

<MCardTitle>下载完成的任务</MCardTitle>
<MCardSubtitle>共 @Isc().Count 个</MCardSubtitle>
<MDataTable ShowSelect SingleSelect=false TItem=@DownloadD Items="@Isc()" Headers="@DownloadedH"
    ItemKey="r=>r.GetHashCode().ToString()">
    <ItemColContent>
        @if (context.Header.Value == "actions")
        {
            <MButton Color="primry" Text Outlined OnClick="()=>{}">下载文件
            </MButton>
        }
        else
        {
            @context.Value
        }
    </ItemColContent>
</MDataTable>

@code {
    Func<List<DownloadD>> Isd = () => DownloadD.Collect(AppEnv.Downloads);
    Func<List<DownloadD>> Isc = () => DownloadD.Collect(AppEnv.Downloadsc);
    private class DownloadD
    {
        public long Uid { get; set; } = 0;
        public string Title { get; set; } = string.Empty;
        public string Unmae { get; set; } = string.Empty;
        public string StartTime { get; set; } = string.Empty;
        public string EndTime { get; set; } = string.Empty;
        public string TottalTime { get; set; } = string.Empty;
        public string TottalDownload { get; set; } = string.Empty;
        public static DownloadD Collect(DDTVServer.Downloads orign)
        {
            DownloadD back = new()
                {
                    Unmae = orign.Name,
                    Uid = orign.Uid,
                    Title = orign.Title,
                    StartTime = orign.StartTime.ToLocalTime().ToString("yy MM/dd HH:mm"),
                    TottalDownload = (orign.TotalDownloadCount / (1024 * 1024)).ToString("####0.##") + "MB"
                };
            if (orign.IsDownloading)
            {
                back.TottalTime = (DateTime.Now - orign.StartTime).ToString();
            }
            else
            {
                back.EndTime = orign.EndTime.ToLocalTime().ToString("yy MM/dd HH:mm");
                back.TottalTime = (orign.EndTime - orign.StartTime).ToString("t");
            }
            return back;
        }
        public static List<DownloadD> Collect(List<DDTVServer.Downloads> orign)
        {
            return orign.Select(each => DownloadD.Collect(each)).ToList();
        }
    }
    private List<DataTableHeader<DownloadD>> DownloadingH = new(){
new(){Text = "主播名",Align= DataTableHeaderAlign.Start,Value = nameof(DownloadD.Unmae)
},
new(){Text="UID", Value=nameof(DownloadD.Uid)},
new(){Text="直播标题", Value=nameof(DownloadD.Title)},
new(){Text="开始时间",Value = nameof(DownloadD.StartTime)},
new(){Text="录制时长",Value= nameof(DownloadD.TottalTime)},
new(){Text = "总下载大小(MB)",Value= nameof(DownloadD.TottalDownload)},
new(){Text="动作",Value= "actions",Sortable=false}
};
    private List<DataTableHeader<DownloadD>> DownloadedH = new(){
new(){Text = "主播名",Align= DataTableHeaderAlign.Start,Value = nameof(DownloadD.Unmae)
},
new(){Text="UID", Value=nameof(DownloadD.Uid)},
new(){Text="直播标题", Value=nameof(DownloadD.Title)},
new(){Text="开始时间",Value = nameof(DownloadD.StartTime)},
new(){Text="录制时长",Value= nameof(DownloadD.TottalTime)},
new(){Text = "总下载大小(MB)",Value= nameof(DownloadD.TottalDownload)},
new(){Text="动作",Value= "actions",Sortable=false}
};

    private async void CancleRec(long uid)
    {
#if !DEBUG
        try
        {
#endif
            var i = await AppEnv.Dserver.CancelDownload(uid);
            if (i.code == DDTVServer.Code.Success)
            {
                await PopupService.EnqueueSnackbarAsync(new SnackbarOptions(i.data, AlertTypes.Success));
            }
            StateHasChanged();
#if !DEBUG
        }
        catch (Exception ex)
        {
            await PopupService.EnqueueSnackbarAsync(ex.Message, AlertTypes.Error);
        }
#endif
    }
    protected override async Task OnInitializedAsync()
    {
        lock (AppEnv.ChangeEvent)
        {
            AppEnv.ChangeEvent = () => InvokeAsync(StateHasChanged);
        }
    }
}