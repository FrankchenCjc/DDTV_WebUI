@page "/Rooms"
@inject IPopupService PopupService
@inject NavigationManager nav

<p style="font-size: xx-large;">房间共 @AppEnv.RoomDetails.Count 个</p>

@* TODO：筛选功能和高级管理功能 *@

<MList>
    <MListItem>
        <MListItemAvatar Height="60" Width="60">
            <MIcon>mdi-account-multiple-plus-outline</MIcon>
        </MListItemAvatar>
        <MListItemContent>
            <MTextField Dense Label="输入UID以增加房间" @bind-Value="@RoomAddUID"
                AppendOuterIcon=@(RoomAddUID!=0 ? "mdi-plus" : "mdi-close")
                OnAppendOuterClick="@addroom">
            </MTextField>
        </MListItemContent>
    </MListItem>
    @foreach (DDTVServer.RoomDetail room in AppEnv.RoomDetails)
    {
        <MDivider Inset></MDivider>
        <MListItem>
            <MListItemAvatar Height="60" Width="60">
                <MImage Src=@room.face Contain Width="60" Class="elevation-6"></MImage>
            </MListItemAvatar>
            <MListItemContent>
                <MListItemTitle>
                    @room.uname
                </MListItemTitle>
                <MListItemSubtitle>
                    @foreach (var tag in gettags(room))
                    {
                        <MChip Small Outlined Color="primary" Class="ms-1">@tag</MChip>
                    }
                    @if (room.live_status == 1)
                    {
                        <MChip Small Outlined Color="warning" 
                        OnClick="@(_=>nav.NavigateTo("https://live.bilibili.com/"+room.room_id.ToString()))" Class="ms-1">
                            <MIcon>mdi-play</MIcon>
                            正在直播
                        </MChip>
                    }
                </MListItemSubtitle>
            </MListItemContent>
            <MListItemAction>
                <div class="mx-1 align-center">
                    <MSwitch Class="mx-1 align-center d-none d-md-flex" @bind-Value=room.IsAutoRec
                        OnChange="(bool i)=>autoRecChange(room.uid,i)">
                        <LabelContent>
                            <span class="mx-1">自动录制</span>
                        </LabelContent>
                    </MSwitch>
                </div>
                <div class="mx-1 align-center">
                    <MSwitch Class="mx-1 align-center d-none d-md-flex" @bind-Value=room.IsRecDanmu
                        OnChange="(bool i)=>recDanmuChange(room.uid,i)" Disabled=!room.IsAutoRec>
                        <LabelContent>
                            <span class="mx-1">录制弹幕</span>
                        </LabelContent>
                    </MSwitch>
                </div>
                <MButton Class="mx-1 align-center" Outlined Text
                    OnClick="@(_=>nav.NavigateTo("Rooms/"+room.uid.ToString()))">房间详情</MButton>
            </MListItemAction>
        </MListItem>
    }
</MList>


@code {
    private long RoomAddUID ;

    private async void addroom()
    {
        if(RoomAddUID == 0) return;
#if !DEBUG
        try
        {
#endif
            if ((await AppEnv.Dserver.AddRoom(RoomAddUID)).code != DDTVServer.Code.Success)
            {
                throw new Exception("未成功添加房间");
            }
            else
            {
                StateHasChanged();
                await PopupService.EnqueueSnackbarAsync(new SnackbarOptions("添加房间完成", AlertTypes.Success));
            }
#if !DEBUG
        }
        catch (Exception ex)
        {
            await PopupService.EnqueueSnackbarAsync(ex.Message, AlertTypes.Error);
        }
#endif

    }
    private async void autoRecChange(long uid, bool Value)
    {
#if !DEBUG
        try
        {
#endif
            var i = await AppEnv.Dserver.SetAutoRec(uid, Value);
            await PopupService.EnqueueSnackbarAsync(new SnackbarOptions(i.data, AlertTypes.Success));
#if !DEBUG
        }
        catch (Exception ex)
        {
            await PopupService.EnqueueSnackbarAsync(new SnackbarOptions($"出现错误\n{ex.Message}\n{ex}", AlertTypes.Success));
        }
#endif
    }

    private async void recDanmuChange(long uid, bool Value)
    {
#if !DEBUG
        try
        {
#endif
            var i = await AppEnv.Dserver.SetRecDanmu(uid, Value);
            StateHasChanged();
            await PopupService.EnqueueSnackbarAsync(new SnackbarOptions(i.data, AlertTypes.Success));
#if !DEBUG
        }
        catch (Exception ex)
        {
            await PopupService.EnqueueSnackbarAsync(new SnackbarOptions($"出现错误\n{ex.Message}\n{ex}", AlertTypes.Success));
        }
#endif
    }

    private List<string> gettags(DDTVServer.RoomDetail room)
    {
        string[] l = { };
        if (room.IsAutoRec) l = l.Append("自动录播");
        if (room.IsRecDanmu) l = l.Append("录制弹幕");
        var t = room.tags.Split(',');
        if (t.Length != 1 || string.Empty != t?[0]) t?.ForEach(i => l.Append(i));
        return l.ToList();
    }
    protected override async Task OnInitializedAsync()
    {
        lock (AppEnv.ChangeEvent)
        {
            AppEnv.ChangeEvent = () => InvokeAsync(StateHasChanged);
        }
    }
}
